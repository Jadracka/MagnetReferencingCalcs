# -*- coding: utf-8 -*-
"""
Created on Tue Jul 25 13:38:29 2023

@author: jbarker, ChatGPT3.5
"""

"""
DOCUMENTATION:
In this code, we define a function circle_residuals that computes the squared 
residuals between the data points and the circle. The fit_circle function uses 
least_squares from SciPy to find the parameters (center coordinates and radius)
 that minimize the residuals. The initial guess for the center coordinates and 
 radius is calculated as the mean of the data points.

The output of the fit_circle function will be the center (cx_fit, cy_fit) and 
radius r_fit of the best-fitting circle to the input data points.
"""

import numpy as np
from scipy.optimize import least_squares

def circle_residuals(params, x, y):
    cx, cy, r = params
    return (x - cx)**2 + (y - cy)**2 - r**2

def fit_circle(x, y):
    initial_params = [np.mean(x), np.mean(y), np.std(x) + np.std(y)]
    result = least_squares(circle_residuals, initial_params, args=(x, y))
    
    if result.success:
        center_x, center_y, radius = result.x
        return (center_x, center_y, radius)
    else:
        return None

# Example usage:
#x_values = np.array([1, 2, 3, 4, 5])
#y_values = np.array([2, 4, 1, 3, 5])
x_values = np.array([
5.030070537804312458e+00,
4.953282847930271515e+00,
5.154044269768675690e+00,
4.913176512375920346e+00,
4.774136767102644008e+00,
4.791501278901874272e+00,
4.866663882874506797e+00,
4.798241683684831393e+00,
4.690042381083261880e+00,
4.345335992634524303e+00,
4.286713938797687362e+00,
4.242389793494418804e+00,
4.149205873422702417e+00,
3.900057999775861539e+00,
4.021577225309568959e+00,
3.748057761812282340e+00,
3.655671372922808082e+00,
3.396545306597281488e+00,
3.292595357501979958e+00,
2.999843575063924739e+00,
2.788313229558966100e+00,
2.607035406571324820e+00,
2.511074715992368311e+00,
2.226651627021543955e+00,
2.084597668482168320e+00,
1.847916765139541839e+00,
1.793868195810611965e+00,
1.637167440405886465e+00,
1.397163466562945100e+00,
1.318264575650659687e+00,
1.031439596892045563e+00,
8.347663683388032441e-01,
7.723753570349346509e-01,
5.796129830912437608e-01,
2.291311199301330759e-01,
1.128493964756022150e-02,
6.441555197619827644e-02,
-9.235233073569795725e-02,
-1.670272744922494945e-01,
-3.557460743089800870e-01,
-4.846561372694091485e-01,
-5.047382011854666395e-01,
-7.443019298959469010e-01,
-4.783814865748838296e-01,
-7.089540583606864788e-01,
-8.817356643947882322e-01,
-8.494540258180353076e-01,
-1.002279247452345867e+00,
-1.014204206919074203e+00,
-9.295084268165120234e-01,
-1.179721347412350907e+00,
-1.037430176150139660e+00,
-8.165740458463114360e-01,
-9.411965968289549567e-01,
-1.036446040494909182e+00,
-8.342974094881882019e-01,
-7.162568002935824074e-01,
-5.641016882310937453e-01,
-4.946281846373055679e-01,
-6.032259549927655451e-01,
-2.908891754306456301e-01,
-3.934264930743462396e-01,
-1.475340062851306366e-01,
2.209731958762749249e-01,
1.361748275072449110e-01,
3.763616332604849957e-01,
4.033522504381006346e-01,
8.172925589351847098e-01,
8.251573486285889159e-01,
9.376233092793365698e-01,
1.187144655727596421e+00,
1.349208926279473753e+00,
1.741098837912439024e+00,
1.841405042227486133e+00,
2.047345237370805204e+00,
2.291523820644740805e+00,
2.252869917425362356e+00,
2.603261439791510146e+00,
2.594945586447649610e+00,
2.867053647362447499e+00,
3.147066960239524924e+00,
3.207239776726162894e+00,
3.244417383923899223e+00,
3.567081535624850641e+00,
3.843169069124866777e+00,
3.825726072549532564e+00,
4.167500316547777750e+00,
4.136117756308400395e+00,
4.206512525808181913e+00,
4.369599748210506895e+00,
4.613057674150173426e+00,
4.597732520604854045e+00,
4.714598126866226480e+00,
4.733478752383230237e+00,
4.933125638777938526e+00,
4.976706717832785287e+00,
4.982119618773817038e+00,
5.150434878804147409e+00,
4.971696634450729846e+00,
4.809261681248228726e+00])

y_values = np.array([
1.246110011856673472e+00,
1.113128022515440518e+00,
1.447875107378715942e+00,
1.603577318492278359e+00,
1.811045801538018640e+00,
1.988745031249865791e+00,
2.127175732894163396e+00,
2.457987028434739596e+00,
2.581133150365634954e+00,
2.461070057461228977e+00,
2.877243986425322309e+00,
3.036347494640593947e+00,
3.169405815248082181e+00,
3.215270770855757299e+00,
3.207633782726349914e+00,
3.479680518824069146e+00,
3.662450154926803592e+00,
3.606291649259724341e+00,
3.728822583646437483e+00,
3.821889074863956903e+00,
3.855026587962119056e+00,
3.999130708333559880e+00,
3.798988931333476593e+00,
4.033664525002063961e+00,
3.945631416672279901e+00,
4.061829208947253633e+00,
4.084321122316807440e+00,
4.119417907958403902e+00,
3.939791968040063264e+00,
3.968460945269268070e+00,
3.895300376910348916e+00,
3.923470135545431781e+00,
3.565646806730212059e+00,
3.509577736374761336e+00,
3.568459367588473707e+00,
3.335733657169098976e+00,
3.344449560029627122e+00,
3.062238277176790646e+00,
2.979260476120530132e+00,
2.856011448211426274e+00,
2.700503783979173011e+00,
2.511118499907712298e+00,
2.479830805449245279e+00,
2.131961508447409059e+00,
1.971017442032118261e+00,
1.946213869294035614e+00,
1.768842139445036210e+00,
1.671892430917455874e+00,
1.301671700908228368e+00,
1.164000600937344476e+00,
9.865208162031194883e-01,
6.613809822474935318e-01,
5.770488660332931952e-01,
2.377480332222921544e-01,
2.456908622520578289e-01,
-7.338778054811463669e-02,
-2.447769925967535898e-01,
-3.076342302040956378e-01,
-5.942306331137253705e-01,
-7.904563561776307701e-01,
-7.807484558589334878e-01,
-1.085035774762330485e+00,
-1.210465491192335374e+00,
-1.104678945327750572e+00,
-1.404575149518563437e+00,
-1.409117547622388722e+00,
-1.547264603979135567e+00,
-1.543712243616220503e+00,
-1.809949578139868454e+00,
-1.808141285666491793e+00,
-1.594259464887761490e+00,
-1.983585263832489565e+00,
-1.969845384765217089e+00,
-2.055554129416789610e+00,
-1.763244454622739266e+00,
-1.961070143642206665e+00,
-1.935934888092344375e+00,
-1.757353157915849007e+00,
-1.833085495252615882e+00,
-1.902841201268969273e+00,
-1.759148771498249886e+00,
-1.698720705659071184e+00,
-1.589039679007181682e+00,
-1.641819896731528061e+00,
-1.496362760712993900e+00,
-1.444681431466123378e+00,
-1.018345451512627786e+00,
-1.121451123455783794e+00,
-8.380287665275165665e-01,
-8.850729273457238477e-01,
-5.493989934314073009e-01,
-4.936496605887082945e-01,
-2.985048514261623431e-01,
7.727035036016405289e-03,
-1.271012080373631337e-01,
2.815303379008424201e-01,
4.914405055859819571e-01,
6.786229931011936722e-01,
7.794667345626783428e-01,
1.026862891012113588e+00])

circle_parameters = fit_circle(x_values, y_values)

if circle_parameters is not None:
    center_x, center_y, radius = circle_parameters
    print("Circle Center (x, y):", (center_x, center_y))
    print("Circle Radius:", radius)
else:
    print("No circle could be fit to the data.")